{"ast":null,"code":"var _jsxFileName = \"/Users/ahmed/Documents/PrintLearning/fullstackopen-2021/Part2/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas',\n    number: '040-1234567'\n  }]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n\n  const handleNameChange = event => {\n    // console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    // console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n\n  const checkDuplicatePerson = person => {\n    if (persons.find(p => p.name === person.name)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const addPerson = event => {\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n\n    if (checkDuplicatePerson(personObject)) {\n      alert(`${newName} already exists in the phonebook`);\n    } else {\n      setPersons(persons.concat(personObject));\n    }\n\n    setNewName('');\n    setNewNumber('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addPerson,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"number: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newNumber,\n          onChange: handleNumberChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), persons.map(person => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [person.name, \" \", person.number]\n      }, person.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Mc07ZpN+Qra5C3bsaGcGh6DDyhk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ahmed/Documents/PrintLearning/fullstackopen-2021/Part2/phonebook/src/App.js"],"names":["React","useState","App","persons","setPersons","name","number","newName","setNewName","newNumber","setNewNumber","handleNameChange","event","target","value","handleNumberChange","checkDuplicatePerson","person","find","p","addPerson","preventDefault","personObject","alert","concat","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BH,QAAQ,CAAC,CACvC;AACEI,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADuC,CAAD,CAAxC;AAMA,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAEQ,SAAF,EAAaC,YAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMU,gBAAgB,GAAIC,KAAD,IAAW;AAClC;AACAJ,IAAAA,UAAU,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACD,GAHD;;AAKA,QAAMC,kBAAkB,GAAIH,KAAD,IAAW;AACpC;AACAF,IAAAA,YAAY,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACD,GAHD;;AAKA,QAAME,oBAAoB,GAAIC,MAAD,IAAY;AACvC,QAAId,OAAO,CAACe,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACd,IAAF,KAAWY,MAAM,CAACZ,IAApC,CAAJ,EAA+C;AAC7C,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GALD;;AAOA,QAAMe,SAAS,GAAIR,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACS,cAAN;AACA,UAAMC,YAAY,GAAG;AACnBjB,MAAAA,IAAI,EAAEE,OADa;AAEnBD,MAAAA,MAAM,EAAEG;AAFW,KAArB;;AAIA,QAAIO,oBAAoB,CAACM,YAAD,CAAxB,EAAwC;AACtCC,MAAAA,KAAK,CAAE,GAAEhB,OAAQ,kCAAZ,CAAL;AACD,KAFD,MAEO;AACLH,MAAAA,UAAU,CAACD,OAAO,CAACqB,MAAR,CAAeF,YAAf,CAAD,CAAV;AACD;;AACDd,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GAbD;;AAeA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAEU,SAAhB;AAAA,8BACE;AAAA,0CACQ;AAAO,UAAA,KAAK,EAAEb,OAAd;AAAuB,UAAA,QAAQ,EAAEI;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADR;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA,4CACU;AAAO,UAAA,KAAK,EAAEF,SAAd;AAAyB,UAAA,QAAQ,EAAEM;AAAnC;AAAA;AAAA;AAAA;AAAA,gBADV;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAA,+BACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,EAcGZ,OAAO,CAACsB,GAAR,CAAYR,MAAM,IAAI;AACrB,0BAAO;AAAA,mBAAsBA,MAAM,CAACZ,IAA7B,OAAoCY,MAAM,CAACX,MAA3C;AAAA,SAAQW,MAAM,CAACZ,IAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFA,CAdH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA9DD;;GAAMH,G;;KAAAA,G;AAgEN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([\n    { \n      name: 'Arto Hellas',\n      number: '040-1234567',\n    }\n  ]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n \n  const handleNameChange = (event) => {\n    // console.log(event.target.value);\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = (event) => {\n    // console.log(event.target.value);\n    setNewNumber(event.target.value);\n  }\n\n  const checkDuplicatePerson = (person) => {\n    if (persons.find(p => p.name === person.name)) {\n      return true\n    }\n    return false\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    if (checkDuplicatePerson(personObject)) {\n      alert(`${newName} already exists in the phonebook`)\n    } else {\n      setPersons(persons.concat(personObject))\n    }\n    setNewName('');\n    setNewNumber('');\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      {persons.map(person => {\n        return <p key={person.name}>{person.name} {person.number}</p>\n      })}\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}