{"ast":null,"code":"var _jsxFileName = \"/Users/ahmed/Documents/PrintLearning/fullstackopen-2021/Part2/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport SearchFilter from './components/SearchFilter';\nimport AddPeopleForm from './components/AddPeopleForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\nimport personService from './services/personService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filteredPersons, setFilteredPersons] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    personService.getAll().then(peopleList => {\n      console.log(\"initial data\", peopleList);\n      setPersons(peopleList);\n      setFilteredPersons(peopleList);\n    });\n  }, []);\n\n  const handleNameChange = event => setNewName(event.target.value);\n\n  const handleNumberChange = event => setNewNumber(event.target.value);\n\n  const handleSearch = event => {\n    let searchEntry = event.target.value.toLowerCase();\n\n    if (searchEntry.length > 0) {\n      setFilteredPersons(persons.filter(person => person.name.toLowerCase().includes(searchEntry)));\n    } else {\n      setFilteredPersons([...persons]);\n    }\n  };\n\n  const checkDuplicatePerson = person => {\n    let foundID = persons.find(p => p.name === person.name) ? persons.find(p => p.name === person.name).id : 0;\n\n    if (foundID === 0) {\n      return false;\n    }\n\n    return foundID;\n  };\n\n  const concatPersonLists = personObject => {\n    setPersons(persons.concat(personObject));\n    setFilteredPersons(persons.concat(personObject));\n  };\n\n  const addPerson = event => {\n    const alertText = `${newName} already exists. Update their phone number?`;\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n    let foundID = checkDuplicatePerson(personObject);\n\n    if (foundID) {\n      if (window.confirm(alertText)) {\n        personService.update(foundID, personObject).then(updatedPerson => {\n          console.log(\"Updating\");\n          setFilteredPersons(filteredPersons.map(person => person.name === newName ? updatedPerson : person));\n          setPersons(filteredPersons);\n        });\n      }\n    } else {\n      personService.create(personObject).then(personList => {\n        setErrorMessage(`${personObject.name} was added to the list`);\n        setTimeout(() => {}, 5000);\n        concatPersonLists(personList);\n        setNewName('');\n        setNewNumber('');\n      });\n    }\n  };\n\n  const deletePerson = (name, id) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService.deleteObject(id).then(() => {\n        console.log(\"Deleting\");\n        setFilteredPersons(filteredPersons.filter(person => person.id !== id));\n        setPersons(filteredPersons);\n      }).catch(error => {\n        console.log(\"Caught Error\", error);\n        alert(`${name} has already been removed from the list`);\n        setFilteredPersons(filteredPersons.filter(person => person.id !== id));\n        setPersons(filteredPersons);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchFilter, {\n      text: \"filter shown with\",\n      handleSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      text: \"add a new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddPeopleForm, {\n      handleNameChange: handleNameChange,\n      handleNumberChange: handleNumberChange,\n      addPerson: addPerson,\n      newName: newName,\n      newNumber: newNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      text: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Persons, {\n      filteredPersons: filteredPersons,\n      deletePerson: deletePerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"1Q0O8sd9QkeS7uJRhw+JHXZtFIQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ahmed/Documents/PrintLearning/fullstackopen-2021/Part2/phonebook/src/App.js"],"names":["React","useState","useEffect","Header","SearchFilter","AddPeopleForm","Persons","Notification","personService","App","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filteredPersons","setFilteredPersons","errorMessage","setErrorMessage","getAll","then","peopleList","console","log","handleNameChange","event","target","value","handleNumberChange","handleSearch","searchEntry","toLowerCase","length","filter","person","name","includes","checkDuplicatePerson","foundID","find","p","id","concatPersonLists","personObject","concat","addPerson","alertText","preventDefault","number","window","confirm","update","updatedPerson","map","create","personList","setTimeout","deletePerson","deleteObject","catch","error","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport Header from './components/Header'\nimport SearchFilter from './components/SearchFilter'\nimport AddPeopleForm from './components/AddPeopleForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport personService from './services/personService'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filteredPersons, setFilteredPersons ] = useState([])\n  const [ errorMessage, setErrorMessage ] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(peopleList => {\n        console.log(\"initial data\", peopleList);\n        setPersons(peopleList)\n        setFilteredPersons(peopleList)\n      })\n  }, [])\n\n  const handleNameChange = (event) => setNewName(event.target.value);\n\n  const handleNumberChange = (event) => setNewNumber(event.target.value); \n\n  const handleSearch = (event) => {\n    let searchEntry = (event.target.value).toLowerCase()\n\n    if(searchEntry.length > 0) {\n      setFilteredPersons(persons.filter(person => person.name.toLowerCase().includes(searchEntry)))\n    } else {\n      setFilteredPersons([...persons])\n    }\n  }\n\n  const checkDuplicatePerson = (person) => {\n    let foundID = persons.find(p => p.name === person.name) ? (persons.find(p => p.name === person.name)).id : 0 \n    if (foundID === 0) {\n      return false\n    }\n    return foundID\n  }\n\n  const concatPersonLists = (personObject) => {\n    setPersons(persons.concat(personObject))\n    setFilteredPersons(persons.concat(personObject))\n  }\n\n  const addPerson = (event) => {\n    const alertText = `${newName} already exists. Update their phone number?`\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    let foundID = checkDuplicatePerson(personObject)\n    if(foundID) {\n      if(window.confirm(alertText)) {\n        personService\n          .update(foundID, personObject)\n          .then(updatedPerson => {\n            console.log(\"Updating\");\n            setFilteredPersons(filteredPersons.map(person => person.name === newName ? updatedPerson : person))\n            setPersons(filteredPersons)\n          })\n      }\n    } else {\n      personService\n        .create(personObject)\n        .then(personList => {\n          setErrorMessage(`${personObject.name} was added to the list`)\n          setTimeout(() => {\n\n          }, 5000)\n          concatPersonLists(personList)\n          setNewName('');\n          setNewNumber('');\n        })\n    }\n  }\n\n  const deletePerson = (name, id) => {\n    if(window.confirm(`Delete ${name}?`)) {\n      personService\n      .deleteObject(id)\n      .then(() => {\n        console.log(\"Deleting\");\n        setFilteredPersons(filteredPersons.filter(person => person.id !== id))\n        setPersons(filteredPersons)\n      })\n      .catch(error => {\n        console.log(\"Caught Error\", error);\n        alert(`${name} has already been removed from the list`)\n        setFilteredPersons(filteredPersons.filter(person => person.id !== id))\n        setPersons(filteredPersons)\n      })\n    } \n  }\n\n  return (\n    <div>\n      <Header text=\"Phonebook\" />\n      <SearchFilter text=\"filter shown with\" handleSearch={handleSearch} />\n      <Header text=\"add a new\" />\n      <AddPeopleForm \n        handleNameChange={handleNameChange} \n        handleNumberChange={handleNumberChange} \n        addPerson={addPerson} \n        newName={newName} newNumber={newNumber} \n      />\n      <Header text=\"Numbers\" />\n      <Persons filteredPersons={filteredPersons} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}